@page "/Tabla2"

@using System.Net.Http.Json
@using System.Text;
@using Newtonsoft.Json;
@using Clase3CorteBlazor.Data
@inject HttpClient _client;

<MudButton OnClick="(args) => AgregarNuevoRegistro()" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary" >Add</MudButton>

<MudDataGrid T="Libro" Items="@Libros" ReadOnly="@_readOnly" EditMode="@(_isCellEditMode ? DataGridEditMode.Cell : DataGridEditMode.Form)"
    StartedEditingItem="@StartedEditingItem" CancelledEditingItem="@CancelledEditingItem" CommittedItemChanges="@CommittedItemChanges"
    Bordered="true" Dense="true" EditTrigger="@(_editTriggerRowClick ? DataGridEditTrigger.OnRowClick : DataGridEditTrigger.Manual)">
    <Columns>
        <Column T="Libro" Field="idlibro" IsEditable="false" />
        <Column T="Libro" Field="titulo" />
        <Column T="Libro" Field="editorial" />
        <Column T="Libro" Field="pagina" />
        <Column T="Libro" Field="descripcion" />
        <Column T="Libro" Field="autor" />
        <Column T="Libro" Hidden="@(_isCellEditMode || _readOnly || _editTriggerRowClick)" CellClass="d-flex justify-end">
            <CellTemplate>
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Edit" OnClick="@context.Actions.StartEditingItem" />
                <MudIconButton Size="@Size.Small" Icon="@Icons.Outlined.Delete" OnClick="(args)=> OnDelete(context.Item)" />
            </CellTemplate>
        </Column>
    </Columns>
</MudDataGrid>


@code {

    [Inject] private IDialogService DialogService { get; set; }
    [Inject] private ISnackbar SnackbarService { get; set; }


    private IEnumerable<Libro> Libros = new List<Libro>();
    private bool _readOnly;
    private bool _isCellEditMode;
    private List<string> _events = new();
    private bool _editTriggerRowClick;

    protected override async Task OnInitializedAsync()
    {

        var elemento = new List<Libro>();
        _client.BaseAddress = new Uri(" https://localhost:7174/Biblioteca");
        var requestMessage = new HttpRequestMessage(HttpMethod.Get, "Biblioteca/ConsultaLibros");
        var respuesta = await _client.SendAsync(requestMessage);
        if(respuesta.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var responseBody = await respuesta.Content.ReadAsStringAsync();
            var ListasLibro = System.Text.Json.JsonSerializer.Deserialize < List < Libro >> (responseBody);
            Libros = ListasLibro;
        }
    }


    readonly IHttpClientFactory _httpClientFactory;

    async void OnDelete(Libro Item)

    {
        ((List<Libro>)Libros).Remove(Item);
        var elemento = new List<Libro>();
        var newBook = new HttpRequestMessage(HttpMethod.Delete, "Biblioteca/Agregar?Titulo=New&Editorial=New&Autor=New&Pagina=1&Descripcion=New");
        var answer = await _client.SendAsync(newBook);
      
        
    SnackbarService.Add("Error 404 archivo no encontrado", Severity.Error);
    }

    async void AgregarNuevoRegistro()
    {
        var Libroo = new Libro
            {
                autor = "New",
                editorial = "New",
                titulo = "New",
                pagina = 1,
                descripcion = "New"
            };
        ((List<Libro>)Libros).Add(Libroo);
        StateHasChanged();
        var elemento = new List<Libro>();
        var newBook = new HttpRequestMessage(HttpMethod.Post, "Biblioteca/Agregar?Titulo=New&Editorial=New&Autor=New&Pagina=1&Descripcion=New");
        var answer = await _client.SendAsync(newBook);

        SnackbarService.Add("Added data mate ;D", Severity.Success);
    }

    // events
    void StartedEditingItem(Libro item)
    {
        _events.Insert(0, $"Event = StartedEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }

    void CancelledEditingItem(Libro item)
    {
        _events.Insert(0, $"Event = CancelledEditingItem, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
    }
    
    //Guardado y actualizado
    void CommittedItemChanges(Libro item)
    {
        _events.Insert(0, $"Event = CommittedItemChanges, Data = {System.Text.Json.JsonSerializer.Serialize(item)}");
       
        
    }
}